// Material colors map
$matColorsMap: (
    red: $mat-red,
    pink: $mat-pink,
    purple: $mat-purple,
    deep-purple: $mat-deep-purple,
    indigo: $mat-indigo,
    blue: $mat-blue,
    light-blue: $mat-light-blue,
    cyan: $mat-cyan,
    teal: $mat-teal,
    green: $mat-green,
    light-green: $mat-light-green,
    lime: $mat-lime,
    yellow: $mat-yellow,
    amber: $mat-amber,
    orange: $mat-orange,
    deep-orange: $mat-deep-orange,
    brown: $mat-brown,
    grey: $mat-grey,
    blue-grey: $mat-blue-grey,
    white: $mat-white,
    black: $mat-black,
    primary: $primary,
    accent: $accent,
    warn: $warn
);

// Material color hues list
$matColorHues: 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, A100, A200, A400, A700;

// Color classes generator mixin
@mixin generateColorClasses($colorName, $bgColor, $fgColor, $hue) {

    .#{$colorName}#{$hue}-bg {
        background-color: $bgColor !important;
    }

    .md-#{$colorName}#{$hue}-bg {
        background-color: $bgColor !important;
        color: $fgColor !important;

        @if (rgba(black, 1) == rgba($fgColor, 1)) {

            &.secondary-text,
            .secondary-text,
            &.mat-icon,
            .mat-icon,
            &.icon,
            .icon {
                color: rgba(0, 0, 0, 0.54) !important;
            }

            &.hint-text,
            .hint-text,
            &.disabled-text,
            .disabled-text {
                color: rgba(0, 0, 0, 0.38) !important;
            }

            &.divider,
            .divider {
                color: rgba(0, 0, 0, 0.12) !important;
            }

        } @else {

            &.secondary-text,
            .secondary-text {
                color: rgba(255, 255, 255, 0.70) !important;
            }

            &.hint-text,
            .hint-text,
            &.disabled-text,
            .disabled-text {
                color: rgba(255, 255, 255, 0.50) !important;
            }

            &.divider,
            .divider {
                color: rgba(255, 255, 255, 0.12) !important;
            }
        }
    }

    .#{$colorName}#{$hue}-fg {
        color: $bgColor !important;
    }

    .#{$colorName}#{$hue}-border {
        border-color: $bgColor !important;
    }

    .#{$colorName}#{$hue}-border-top {
        border-top-color: $bgColor !important;
    }

    .#{$colorName}#{$hue}-border-right {
        border-right-color: $bgColor !important;
    }

    .#{$colorName}#{$hue}-border-bottom {
        border-bottom-color: $bgColor !important;
    }

    .#{$colorName}#{$hue}-border-left {
        border-left-color: $bgColor !important;
    }
}

// Generate the color classes...
@each $colorName, $colorMap in $matColorsMap {

    @each $hue in $matColorHues {

        $bgColor: map-get($colorMap, $hue);
        $fgColor: map-get(map-get($colorMap, 'contrast'), $hue);

        @if ($bgColor != null and $fgColor != null) {

            @include generateColorClasses($colorName, $bgColor, $fgColor, '-#{$hue}');

            // Run the generator one more time for default values (500)
            @if ($hue == 500) {
                @include generateColorClasses($colorName, $bgColor, $fgColor, '');
            }
        }
    }
}
